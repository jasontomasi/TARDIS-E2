@name TARDIS Barge
@inputs DEMAT MAT ESCAPE BARGE REPAIR POWER HADS GPS LOCK HEALTH WHERE STATUS COMETOME FASTRETURN PHYS FLIGHT DRIFT HANDBRK SNEAK
@persist TARDIS:entity TARDISINTERIOR:entity Holo:entity HOLONUMBER:number A B1 B2 B3 Demat Mat Position0:vector Position1:vector CORNER1:vector CORNER2:vector Position1B:vector DeathRescue:number ARTRONFUEL Mass RPM Veloc DRIFTSPIN FuelPercent TravelDistance


#ifdef entity:plySpawn()
	#else
		error("This server does not have plycore installed, which this needs to work.")
	#endif


# A += 10
# B1 = 50
# B2 = 55
# B3 = 60

# holoPos(1,Position1B+vec(0,cos(A)*B1,sin(A)*B1))
# holoPos(2,Position1B+vec(-cos(A)*B1,sin(A)*B1,cos(A)*B1))
# holoPos(3,Position1B+vec(cos(A)*B1,sin(A)*B1,cos(A)*B1))
# holoPos(4,Position1B+vec(0,cos(A)*B2,sin(A)*B2))
# holoPos(5,Position1B+vec(-cos(A)*B2,sin(A)*B2,cos(A)*B2))
# holoPos(6,Position1B+vec(cos(A)*B2,sin(A)*B2,cos(A)*B2))
# holoPos(7,Position1B+vec(0,cos(A)*B3,sin(A)*B3))
# holoPos(8,Position1B+vec(-cos(A)*B3,sin(A)*B3,cos(A)*B3))
# holoPos(9,Position1B+vec(cos(A)*B3,sin(A)*B3,cos(A)*B3))


    if(!owner():isAlive() && DeathRescue == 1) {
        owner():plySpawn()
        print("Death detected!")
        timer("playerdeath", 7000)
    }

	if(DRIFTSPIN == 1) {
		interval(250)
		TARDIS:applyAngForce(ang(0,Mass*800,0))
	}
	if(DRIFTSPIN == 0) {
		interval(0)
		runOnChat(1)
	}



if(first() | dupefinished()) {

    runOnChat(1)

    TARDIS = entity():isConstrainedTo():tardisGet()
    TARDISINTERIOR = entity():isConstrainedTo()
    TARDIS:createWire(entity(),"XYZ", "XYZ")

	Mass = TARDIS:mass()
	DeathRescue = 0
	DRIFTSPIN = 0
	# OWNER = TARDIS:owner()
	FuelPercent = TARDIS:tardisArtronEnergy() / TARDIS:tardisMaxArtronEnergy() * 100


function preFlightCheck() {

FLIGHTREADY = 0

	if(TARDIS:tardisHealth() <= 12) {
		print("ERROR: TARDIS damaged.")
		return
    }
	if(TARDIS:tardisArtronEnergy() <= 12) {
		print("ERROR: TARDIS fuel too low.")
		return
	}
	if(TARDIS:tardisSelfrepairing() == 1) {
		print("ERROR: TARDIS repairing.")
		return
    }
	if(TARDIS:tardisMoving() == 1) {
		print("ERROR: TARDIS already moving...")
		return
	}

	if(TARDIS:tardisHealth() >= 13 && TARDIS:tardisArtronEnergy() >= 13) {
		if(TARDIS:tardisPowered() == 0) {
			TARDIS:tardisPower()
		}
		if(TARDIS:tardisOpened() == 1) {
			TARDIS:tardisDoor()	
		}
		if(TARDIS:tardisBraking() == 1) {
		    TARDIS:tardisHandbrake()
        }
		if(TARDIS:tardisIsHADS() == 1) {
			TARDIS:tardisHADS()
		}
		if(TARDIS:tardisLocked() == 1) {
		    TARDIS:tardisLock()
        }
		
		
	}

} # END FUNCTION




function funcPlayerDeath() {

	if(TARDIS:tardisHealth() <= 2){
		print("ERROR: TARDIS damaged")
		return
    }

	if(TARDIS:tardisArtronEnergy() <= 6) {
		print("ERROR: TARDIS fuel too low.")
		return
	}

	else {

	if(TARDIS:tardisPowered()==0){
		TARDIS:tardisPower()
    }

	if(TARDIS:tardisPhyslocked()==0){
		TARDIS:tardisPhyslock()
    }
	
	if(TARDIS:tardisFlying()==0){
		TARDIS:tardisFlightmode()
    }

	if(TARDIS:tardisIsHADS()==1){
		TARDIS:tardisHADS()
    }

	if(TARDIS:tardisLongflighted()==1){
		TARDIS:tardisLongflight()
	}

	if(TARDIS:tardisInVortex()==1) {
		TARDIS:tardisSetDestination(owner():pos(), ang(0,0,0))
		TARDIS:tardisMaterialise()
		#timer("WaitingForRemat", 1000)
    }
    if(TARDIS:tardisInVortex()==0) {
		TARDIS:tardisDemat(owner():pos(), ang(0,0,0))
		#timer("WaitingForDemat", 1000)
	}
	}

} # END FUNCTION


function makeItPretty(Index:number, Model:string, Where:vector, Angle:angle, Size:vector, Skin:string)
	{
    holoCreate(Index,Where,Size,Angle,vec(255,255,255),Model)
    holoMaterial(Index,Skin)
    HOLONUMBER = HOLONUMBER + 1

} # END FUNCTION



function funcBarge()
	{

	if(TARDIS:tardisHealth() == 0) {
		print("ERROR: TARDIS damaged.")
		return
	}

	if(TARDIS:tardisArtronEnergy() <= 6) {
		print("ERROR: TARDIS fuel too low.")
		return
	}

	if(TARDIS:tardisPowered()==0){
		TARDIS:tardisPower()
    }
	if(TARDIS:tardisOpened()==1){
		TARDIS:tardisDoor()
	}
	if(TARDIS:tardisPhyslocked()==0){
		TARDIS:tardisPhyslock()
    }
	if(TARDIS:tardisLongflighted()==1){
		TARDIS:tardisLongflight()
	}

    OURSELVES=entity():isConstrainedTo()
    #findExcludeEntity(OURSELVES)
    #print("Excluding: ", OURSELVES)

    findByClass("gmod_tardis_interior")
		#TardisFindAll = findSortByDistance(owner():pos())
    TardisCount = findToArray():count()
    RandomChoice = randint(1,TardisCount)
    TardisBarge = findResult(RandomChoice)

    Position0 = TardisBarge:toWorld(vec())
    Position1 = TardisBarge:toWorld(vec(randint(50,70), randint(50,70), 5))
    #Position1B = Position1 + vec(0,0,50)
    #Position2 = TardisBarge:toWorld(vec(40,40,10))
    #Position3 = TardisBarge:toWorld(vec(-40,-40,10))
    #Position4 = TardisBarge:toWorld(vec(40,-40,10))
    #Position5 = TardisBarge:toWorld(vec(-40,40,10))
    #Position8 = TardisBarge:boxMax()
    #Position9 = TardisBarge:boxMin()
    #Position10 = TardisBarge:toWorld(vec(0,0,20))
    #Position1 = TardisBarge:toWorld(vec(0,0,40))
    #Position12 = TardisBarge:toWorld(vec(0,0,80))
   
    #CORNER1 = TardisBarge:boxMax()
    #CORNER2 = TardisBarge:boxMin()
    #Position22 = Position0 +vec(randvec(CORNER1,CORNER2))
   
    #SIZEEXTERIOR = TARDIS:getModelScale()  # Get scale of our exterior shell

# print(TardisBarge:boxMax():x())
# print(TardisBarge:boxMax():y())
# print(TardisBarge:boxMax():z())

# print(TardisBarge:boxMin():x())
# print(TardisBarge:boxMin():y())
# print(TardisBarge:boxMin():z())

# print(TARDIS:boxMax():x())
# print(TARDIS:boxMax():y())
# print(TARDIS:boxMax():z())

# print(TARDIS:boxMin():x())
# print(TARDIS:boxMin():y())
# print(TARDIS:boxMin():z())


# print("TARDIS located at: " + Position1 + " owned by " + TardisBarge:owner())

            if(TARDIS:tardisHealth() >= 11) {
			HEALTHY = 1
            }

            if(TARDIS:tardisHealth() < 11) {
			HEALTHY = 0
            }

            if(TARDIS:tardisInVortex()==1){
					if(HEALTHY == 1) {
					TARDIS:tardisSetDestination(Position1, ang(0,0,0))
					TARDIS:tardisMaterialise()
					timer("WaitingForRemat", 1000)
					}
					if(HEALTHY == 0) {
					TARDIS:tardisSetDestination(Position1, ang(0,-90,-0))
					TARDIS:tardisMaterialise()
					timer("WaitingForRemat", 1000)
					}
            }
            if((TARDIS:tardisInVortex()==0) & (TARDIS:tardisArtronEnergy() >= 6)){
					if(HEALTHY == 1) {
					TARDIS:tardisDemat(Position1, ang(0,0,0))
					timer("WaitingForDemat", 1000)
					}
					if(HEALTHY == 0) {
					TARDIS:tardisDemat(Position1, ang(0,-90,-0))
					timer("WaitingForDemat", 1000)
					}
            }
			if((TARDIS:tardisInVortex()==0) & (TARDIS:tardisArtronEnergy() < 6)){
					print("Insufficient fuel to attempt Time-Ram!")
			}

    #makeItPretty(1,"models/effects/splodearc.mdl",Position2,ang(0,0,0),vec(1,1,1),"")
    #makeItPretty(2,"models/effects/splodearc.mdl",Position3,ang(0,0,0),vec(1,1,1),"")
    #makeItPretty(3,"models/effects/splodearc.mdl",Position4,ang(0,0,0),vec(1,1,1),"")
    #makeItPretty(4,"models/effects/splodearc.mdl",Position5,ang(0,0,0),vec(1,1,1),"")
    makeItPretty(10,"hqsphere",Position1+vec(0,0,50),ang(0,0,0),vec(14,14,14),"models/props_combine/com_shield001a")


# D = holoCreate(1,Position0+vec(0,0,85),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
# F = holoCreate(2,Position0+vec(0,0,60),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
# G = holoCreate(3,Position0+vec(0,0,60),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
# H = holoCreate(4,Position0+vec(0,0,85),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
# I = holoCreate(5,Position0+vec(0,0,60),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
# J = holoCreate(6,Position0+vec(0,0,60),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
# K = holoCreate(7,Position0+vec(0,0,85),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
# L = holoCreate(8,Position0+vec(0,0,60),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
# M = holoCreate(9,Position0+vec(0,0,60),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")

# D:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
# F:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
# G:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
# H:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
# I:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
# J:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
# K:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
# L:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
# M:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)

#D:setMaterial("models/alyx/emptool_glow")
#F:setMaterial("models/alyx/emptool_glow")
#G:setMaterial("models/alyx/emptool_glow")


	timer("bargeexplosion1",2000)
	timer("deleteholo",17000)

## CLEANUP: clean up if loops to ensure that a TARDIS with 0 health doesn't do barge process



    ARTRONCURRENT = TARDIS:tardisArtronEnergy()
    ARTRONDIFF = ARTRONCURRENT - 5
    TardisBarge:tardisRemoveArtronEnergy(ARTRONDIFF)

    # ARTRONFINALAMOUNT = TARDIS:tardisArtronEnergy() - 75
    # TardisBarge:tardisRemoveArtronEnergy(ARTRONFINALAMOUNT)

} # END FUNCTION


function funcTargetPlayer(ARGUMENT1:string)
	{
		PERSON = findPlayerByName(ARGUMENT1)
			if(PERSON:isValid()){
			NEARSUBJECT = PERSON:pos()
			NEARSUBJECT = NEARSUBJECT + vec(-50,-50,0)
			print("Going to: "+PERSON:name())

            if(TARDIS:tardisPowered()==0){
		              TARDIS:tardisPower()
            }
            if(TARDIS:tardisOpened()==0){
		              TARDIS:tardisDoor()
            }
            if(TARDIS:tardisPhyslocked()==0){
		              TARDIS:tardisPhyslock()
            }
	        if(TARDIS:tardisLongflighted()==1){
		              TARDIS:tardisLongflight()
            }
            # REQUIRED: Door is first made locked to enable demat, then unlocked in preparation of the player
            if(TARDIS:tardisLocked()==1){
		              TARDIS:tardisLock()
            }
            if(TARDIS:tardisInVortex()==1){
					TARDIS:tardisSetDestination(NEARSUBJECT, ang(0,0,0))
					TARDIS:tardisMaterialise()
            }
            elseif(TARDIS:tardisInVortex()==0){
		              TARDIS:tardisDemat(NEARSUBJECT, ang(0,0,0))
            }
			}
		else {
            print("Unable to target this person!")
        }
} # END FUNCTION



function funcFlight()
	{

	if(TARDIS:tardisFlying()==0) {
		FlightOnSuccess = TARDIS:tardisFlightmode()
		if (FlightOnSuccess==1) {
			print("Flight mode: Enabled")
		}
		elseif (FlightOnSuccess==0) {
			print("Flight mode: *FAILED*")
		}
    }
	elseif(TARDIS:tardisFlying()==1) {
	FlightOffSuccess = TARDIS:tardisFlightmode()
	
		if (FlightOffSuccess==1) {
			print("Flight mode: Disabled")
		}
		elseif (FlightOffSuccess==0) {
			print("Flight mode: *FAILED*")
		}
    }
} # END FUNCTION



function funcDrift()
	{

	if(DRIFTSPIN==0) {
		DRIFTSPIN = 1
		print("Drift mode: Enabled")
    }
	elseif(DRIFTSPIN==1) {
		DRIFTSPIN = 0
		print("Drift mode: Disabled")
    }

	if((TARDIS:tardisHealth() > 0) & (TARDIS:tardisArtronEnergy() >= 10) & (DRIFTSPIN==1)) {

		interval(250)

            if(TARDIS:tardisPowered() == 0) {
		        TARDIS:tardisPower()
            }
			if(TARDIS:tardisBraking() == 1) {
		        TARDIS:tardisHandbrake()
            }
			if(TARDIS:tardisOpened() == 1) {
		        TARDIS:tardisDoor()
            }
			if(TARDIS:tardisFlying() == 0) {
				TARDIS:tardisFlightmode()
			}
			if(TARDIS:tardisPhyslocked() == 1) {
		        TARDIS:tardisPhyslock()
            }
			if(TARDIS:tardisMoving() == 1) {
				print("TARDIS already moving. Cannot drift.")
			}

			timer("TARDISdrift1",14000)

	}
} # END FUNCTION


function funcEscape()
	{
	
	if((TARDIS:tardisHealth() > 0) & (TARDIS:tardisArtronEnergy() > 5)) {
	
            if(TARDIS:tardisPowered()==0){
		              TARDIS:tardisPower()
            }
			if(TARDIS:tardisBraking()==1){
		              TARDIS:tardisHandbrake()
            }
            if(TARDIS:tardisOpened()==1){
		              TARDIS:tardisDoor()
            }
            if(TARDIS:tardisLongflighted()==0){
		              TARDIS:tardisLongflight()
	           }
            if(TARDIS:tardisIsomorphic()==0){
		              TARDIS:tardisIsomorph()
            }

			TARDIS:tardisDemat(TARDIS:tardisLastPos(), TARDIS:tardisLastAng())

			timer("EscapeFuncMakeSane",6000)
			
	}
} # END FUNCTION


function funcLockdoor()
	{
            if(TARDIS:tardisPowered()==0){
		              TARDIS:tardisPower()
            }
			if(TARDIS:tardisOpened()==1){
				TARDIS:tardisDoor()
			}
            if(TARDIS:tardisLocked()==0){
		            TARDIS:tardisLock()
					print("Door locked")
            }
			elseif(TARDIS:tardisLocked()==1){
		              TARDIS:tardisLock()
					print("Door unlocked")
            }
} # END FUNCTION


function funcPhyslock()
	{
		TARDIS:tardisPhyslock()

			if(TARDIS:tardisPhyslocked() == 0) {
				print("Physical lock: OFF")
            }
			elseif(TARDIS:tardisPhyslocked() == 1) {
				print("Physical lock: ON")
            }

} # END FUNCTION


function funcMaterialise()
	{
            if(TARDIS:tardisInVortex()==1){
			TARDIS:tardisMaterialise()
            }
} # END FUNCTION


function funcHealth()
	{
            if(TARDIS:tardisHealth() > 20){
			print("Health: " + TARDIS:tardisHealth() + "%")
            }
            elseif(TARDIS:tardisHealth() <= 20){
			print("**WARNING** Health: " + TARDIS:tardisHealth() + "%")
            }
} # END FUNCTION


function funcHADS()
	{
            if(TARDIS:tardisPowered()==0){
		              TARDIS:tardisPower()
            }
			TARDIS:tardisHADS()   
            if(TARDIS:tardisIsHADS()==1){
		              print("HADS: ON")
            }
            elseif(TARDIS:tardisIsHADS()==0){
		              print("HADS: OFF")
            }
} # END FUNCTION


function funcHandbrake()
	{
			TARDIS:tardisHandbrake()
            if(TARDIS:tardisBraking()==1){
		              print("Handbrake: ON")
            }
            elseif(TARDIS:tardisBraking()==0){
		              print("Handbrake: OFF")
            }
} # END FUNCTION


function funcSneak()
	{
			if(TARDIS:tardisPowered()==0){
		    TARDIS:tardisPower()
            }
			TARDIS:tardisPhase()
			
            if(TARDIS:tardisVisible()==1){
		              print("Cloak: OFF")
            }
            elseif(TARDIS:tardisVisible()==0){
		              print("Cloak: ON")
            }
} # END FUNCTION


function funcRepair()
	{
            if(TARDIS:tardisPowered()==0){
		    TARDIS:tardisPower()
            }
		    TARDIS:tardisSelfrepair()
} # END FUNCTION


function funcWhere()
	{
            if(TARDIS:tardisInVortex()==1){
		    print("Location: Vortex")
            }
            elseif(TARDIS:tardisInVortex()==0){
            print("Location: Materialised at ",TARDIS:pos())
            }
            if(TARDIS:tardisMoving()==1){
		    print("Location: -DEMAT/REMAT-")
            }
} # END FUNCTION


function funcReturn()
	{
			if(TARDIS:tardisHealth() >= 13 && TARDIS:tardisArtronEnergy() >= 10) {
				if(TARDIS:tardisPowered()==0){
					TARDIS:tardisPower()
				}				
				TARDIS:tardisFastReturn()
			}
} # END FUNCTION


function funcGPS()
	{
    FINDGPS = findByClass("gmod_wire_gps")
	if(FINDGPS > 0) {
	
	GPSFindAll = findSortByDistance(owner():pos())
    GPSCount = findToArray():count()
    RandomChoice = randint(1,GPSCount)
    GPSLOCATION1 = findResult(RandomChoice)
    GPSLOCATION2 = GPSLOCATION1:toWorld(vec(0,0,2)) # Add 2 to Z axis/height, to ensure TARDIS doesn't get stuck on GPS entity
	
            if(TARDIS:tardisPowered()==0){
				        TARDIS:tardisPower()
            }
            if(TARDIS:tardisOpened()==1){
		              TARDIS:tardisDoor()
            }
            if(TARDIS:tardisPhyslocked()==0){
		          TARDIS:tardisPhyslock()
            }
            if(TARDIS:tardisLongflighted()==1){
		              TARDIS:tardisLongflight()
            }
            if(TARDIS:tardisInVortex()==1){
					TARDIS:tardisSetDestination(GPSLOCATION2, ang(0,0,0))
					TARDIS:tardisMaterialise()
            }
            if(TARDIS:tardisInVortex()==0){
		              TARDIS:tardisDemat(GPSLOCATION2, ang(0,0,0))
            }
	}
	else {
			print("Can't find GPS to lock on to.")
		}
} # END FUNCTION


function funcGPS2()
	{
    FINDGPS = findByClass("gmod_wire_gps")
	if(FINDGPS > 0) {
	
	GPSFindAll = findSortByDistance(owner():pos())
    GPSCount = findToArray():count()
    RandomChoice = randint(1,GPSCount)
    GPSLOCATION1 = findResult(RandomChoice)
    GPSLOCATION2 = GPSLOCATION1:toWorld(vec(0,0,2)) # Add 2 to Z axis/height, to ensure TARDIS doesn't get stuck on GPS entity
	
            if(TARDIS:tardisPowered()==0){
				        TARDIS:tardisPower()
            }
            if(TARDIS:tardisOpened()==1){
		              TARDIS:tardisDoor()
            }
            if(TARDIS:tardisPhyslocked()==0){
		          TARDIS:tardisPhyslock()
            }
            if(TARDIS:tardisLongflighted()==0){
		              TARDIS:tardisLongflight()
            }
			if(TARDIS:tardisInVortex()==0){
			TARDIS:tardisDemat(GPSLOCATION2, ang(0,0,0))
			}
			TARDIS:tardisSetDestination(GPSLOCATION2, ang(0,0,0))

		TravelDistCalc = GPSLOCATION2 - TARDIS:pos()						#Subtract them to make a direction
		TravelDistance = TravelDistCalc:length()
		TravelDistIncr = TravelDistance * 2 + 30000

	print("Plotting path to:", GPSLOCATION2)
	print("Travel distance:", TravelDistance)
	print("Arrival ETA is:", TravelDistIncr / 1000, "seconds.")

	timer("TARDISdrift2", TravelDistIncr)
	}
	else {
			print("Can't find GPS to lock on to.")
		}
} # END FUNCTION


function funcStatus()
	{
		    if(TARDIS:tardisInVortex()==1){
		              print("Location: -VORTEX-")
            }
            if(TARDIS:tardisInVortex()==0 & TARDIS:tardisMoving()==0){
		              print("Location: ",TARDIS:pos())
            }
            if(TARDIS:tardisMoving()==1){
		              print("Location: -DEMAT/REMAT-")
            }
            if(TARDIS:tardisPowered()==1){
		              print("Power: ON")
            }
            elseif(TARDIS:tardisPowered()==0){
		              print("Power: OFF")
            }
            if(TARDIS:tardisVisible()==0){
		              print("Cloak: ON")
            }
			if(TARDIS:tardisVisible()==1){
		              print("Cloak: OFF")
            }
            if(TARDIS:tardisIsHADS()==1){
		              print("HADS: ON")
            }
            elseif(TARDIS:tardisIsHADS()==0){
		              print("HADS: OFF")
            }
			if(TARDIS:tardisSelfrepairing()==1){
		              print("-REPAIRING-")
            }
			print("Fuel: ", TARDIS:tardisArtronEnergy(), " / ", FuelPercent,"%")
            print("Health: ", TARDIS:tardisHealth())
			print("Came from: ", TARDIS:tardisLastPos())
			print("Size (exterior): ", TARDIS:boxSize())

			findByClass("gmod_tardis")
			TardisCount = findToArray():count()
			print("TARDISes in universe: ", TardisCount)
} # END FUNCTION


function funcComeToMe()
	{
            WHEREAMI = owner():pos()
            NEARPLAYER = WHEREAMI + vec(0,0,0)
    
            if(TARDIS:tardisPowered()==0){
		              TARDIS:tardisPower()
            }
            if(TARDIS:tardisOpened()==1){
		              TARDIS:tardisDoor()
            }
            if(TARDIS:tardisPhyslocked()==0){
		              TARDIS:tardisPhyslock()
            }
	        if(TARDIS:tardisLongflighted()==1){
		              TARDIS:tardisLongflight()
            }
            if(TARDIS:tardisLocked()==1){
		              TARDIS:tardisLock()
            }

            if(TARDIS:tardisInVortex()==1){
					TARDIS:tardisSetDestination(NEARPLAYER,ang(0,0,0))
					TARDIS:tardisMaterialise()
            }
            
            if(TARDIS:tardisInVortex()==0){
			
				if(TARDIS:tardisBraking()==1) {
					ARTRONFUEL = TARDIS:tardisArtronEnergy()
					#ARTRONREMAINING = TARDIS:tardisMaxArtronEnergy() - TARDIS:tardisArtronEnergy()
					#print("Fuel reserves: " + ARTRONFUEL)
			
					if (ARTRONFUEL <= 6) {
						print("Insufficient fuel for safe flight: " + ARTRONFUEL)
					}
			
					if(ARTRONFUEL >= 6) {
						TARDIS:tardisHandbrake()
						print("Fuel reserves: " + ARTRONFUEL)
						TARDIS:tardisDemat(NEARPLAYER,ang(0,0,0))
					}
				}
				
				elseif(TARDIS:tardisBraking()==0) {
					TARDIS:tardisDemat(NEARPLAYER,ang(0,0,0))     
				}
	}

} # END FUNCTION


}  # END OF FIRST



if (TARDIS:isValid()) {


### TIMERS

if(clk("TARDISdrift1")) {
	if( (TARDIS:tardisPowered() == 0) | (TARDIS:tardisArtronEnergy() <= 6) ) {
		DRIFTSPIN = 0
		interval(0)
		runOnChat(1)

		if(TARDIS:tardisFlying() == 1) {
			TARDIS:tardisFlightmode()
		}
	}
	if( (TARDIS:tardisPowered() == 1) & (TARDIS:tardisArtronEnergy() > 6) & (DRIFTSPIN == 1)) {

		if(TARDIS:tardisInVortex() == 1) {
		TARDIS:tardisSetDestination(NEARSUBJECT, ang(0,0,0))
		TARDIS:tardisMaterialise()
		}
		if(TARDIS:tardisInVortex() == 0) {
		TARDIS:tardisFastDemat()
		}
	timer("TARDISdrift1",14000)
	}
}

if(clk("TARDISdrift2")) {
    if(TARDIS:tardisInVortex() == 1) {
			TARDIS:tardisMaterialise()
    }
}
			
if(clk("EscapeFuncMakeSane")) {
	TARDIS:tardisSetDestination(TARDIS:tardisLastPos(), TARDIS:tardisLastAng())
}

if(clk("deleteholo")) {
    holoDeleteAll()
	HOLONUMBER = 0
}

if(clk("playerdeath")) {
    funcPlayerDeath()
}

if(clk("bargeexplosion1")) {
	BOOM1 = effect()
	BOOM1:setDamageType(256)
	BOOM1:setScale(100)
	BOOM1:setMagnitude(150)
	BOOM1:setRadius(600)
	BOOM1:setOrigin(Position1)
	BOOM1:play("Explosion")
	
	timer("bargeexplosion2",2000)
}

if(clk("bargeexplosion2")) {
	BOOM2 = effect()
	BOOM2:setDamageType(256)
	BOOM2:setScale(100)
	BOOM2:setMagnitude(150)
	BOOM2:setRadius(600)
	BOOM2:setOrigin(Position1)
	BOOM2:play("Explosion")

	timer("bargeexplosion3",2000)
}

if(clk("bargeexplosion3")) {
	BOOM3 = effect()
	BOOM3:setDamageType(256)
	BOOM3:setScale(100)
	BOOM3:setMagnitude(150)
	BOOM3:setRadius(600)
	BOOM3:setOrigin(Position1)
	BOOM3:play("Explosion")
	
	timer("bargeexplosion4",2000)
}

if(clk("bargeexplosion4")) {
	BOOM4 = effect()
	BOOM4:setDamageType(256)
	BOOM4:setScale(100)
	BOOM4:setMagnitude(150)
	BOOM4:setRadius(600)
	BOOM4:setOrigin(Position1)
	BOOM4:play("Explosion")
	
	timer("bargeexplosion5",2000)
}

if(clk("bargeexplosion5")) {
	BOOM5 = effect()
	BOOM5:setDamageType(256)
	BOOM5:setScale(100)
	BOOM5:setMagnitude(150)
	BOOM5:setRadius(600)
	BOOM5:setOrigin(Position1)
	BOOM5:play("Explosion")
}



### WIRE BUTTONS

if (DEMAT&~DEMAT) {
	funcEscape()
}

if (MAT&~MAT) {
	funcMaterialise()
}

if (ESCAPE&~ESCAPE) {
	funcEscape()
}

if (BARGE&~BARGE) {
	funcBarge()
}

if (HANDBRK&~HANDBRK) {
	funcHandbrake()
}

if (SNEAK&~SNEAK) {
	funcSneak()
}

if (REPAIR&~REPAIR) {
	funcRepair()
}

if (POWER&~POWER) {
TARDIS:tardisPower()
}

if (HADS&~HADS) {
	funcHADS()
}

if (GPS&~GPS) {
	funcGPS()
}

if (LOCK&~LOCK) {
	funcLockdoor()
}

if (PHYS&~PHYS) {
	funcPhyslock()
}

if (HEALTH&~HEALTH) {
	funcHealth()
}

if (WHERE&~WHERE) {
	funcWhere()
}

if (FASTRETURN&~FASTRETURN) {
	funcReturn()
}

if (STATUS&~STATUS) {
	funcStatus()
}

if (COMETOME&~COMETOME) {
	funcComeToMe()
}

if (DRIFT&~DRIFT) {
	funcDrift()
}

if (FLIGHT&~FLIGHT) {
	funcFlight()
}



### Script for monitoring chat commands

if(chatClk(owner())) {
    LastSaid = owner():lastSaid():lower():explode(" ")
    COMMAND = LastSaid[1,string]
    ARGUMENT1 = LastSaid[2,string]


if(COMMAND=="!drift") {
    hideChat(1)
	funcDrift()
}

elseif(COMMAND=="!barge") {
    hideChat(1)
	funcBarge()
}

elseif(COMMAND=="!esc") {
    hideChat(1)
	funcEscape()
    }

elseif(COMMAND=="!lock") {
    hideChat(1)
	funcLockdoor()
    }

elseif(COMMAND=="!phys") {
    hideChat(1)
	funcPhyslock()
    }

elseif(COMMAND=="!mat") {
    hideChat(1)
	funcMaterialise()
    }

elseif(COMMAND=="!health") {
    hideChat(1)
	funcHealth()
    }

elseif(COMMAND=="!power") {
    hideChat(1)
	TARDIS:tardisPower()
    }

elseif(COMMAND=="!brake") {
    hideChat(1)
	funcHandbrake()
    }

elseif(COMMAND=="!sneak") {
    hideChat(1)
	funcSneak()
    }

elseif(COMMAND=="!hads") {
    hideChat(1)
	funcHADS()
    }

elseif(COMMAND=="!repair") {
    hideChat(1)
	funcRepair()
    }

elseif(COMMAND=="!where") {
    hideChat(1)
	funcWhere()
    }

elseif(COMMAND=="!return") {
    hideChat(1)
	funcReturn()
    }

elseif(COMMAND=="!gps") {
    hideChat(1)
	funcGPS()
	}

elseif(COMMAND=="!gps2") {
    hideChat(1)
	funcGPS2()
	}

elseif(COMMAND=="!status") {
    hideChat(1)
	funcStatus()
    }

elseif(COMMAND=="!me") {
    hideChat(1)
	funcComeToMe()
    }

elseif(COMMAND=="!go") {
	hideChat(1)
	if(LastSaid[2,string]){
		funcTargetPlayer(ARGUMENT1)
    }
    }

elseif(COMMAND=="!fly") {
    hideChat(1)
	funcFlight()
    }

elseif(COMMAND=="!death") {
	hideChat(1)
    if(DeathRescue == 1) {
        DeathRescue = 0
        runOnDeath(0)
        print("TARDIS death rescue is now OFF")
    }
    elseif(DeathRescue == 0) {
        DeathRescue = 1
        runOnDeath(1)
        print("TARDIS death rescue is now ON")
    }
    }
    
} # END OF CHAT MONITOR


}

elseif (TARDIS:isValid() == 0) {

	print("First wire the E2 chip to TARDIS")

}
