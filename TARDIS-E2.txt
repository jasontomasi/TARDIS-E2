@name TARDIS Barge
@inputs DEMAT MAT ESCAPE BARGE REPAIR POWER HADS GPS LOCK HEALTH WHERE STATUS COMETOME FASTRETURN PHYS
@persist [TARDIS TARDISINTERIOR]:entity Holo:entity HOLONUMBER:number A B1 B2 B3 Demat Mat Position0:vector Position1:vector Position2:vector Position3:vector Position4:vector Position5:vector CORNER1:vector CORNER2:vector Position1B:vector Position10:vector Position11:vector Position12:vector DeathRescue:number


#ifdef entity:plySpawn()
	#else
		error("This server does not have plycore installed, which this needs to work.")
	#endif


runOnChat(1)


    if(!owner():isAlive() && DeathRescue == 1) {
        owner():plySpawn()
        print("Death detected!")
        timer("playerdeath", 7000)
    }


if(first() | dupefinished()) {

    TARDIS = entity():isConstrainedTo():tardisGet()
    TARDISINTERIOR = entity():isConstrainedTo()
    TARDIS:createWire(entity(),"XYZ", "XYZ")

DeathRescue = 0

function funcPlayerDeath() {

	if(TARDIS:tardisHealth() == 0){
		print("TARDIS disabled")
    }
	
	else {
	
	if(TARDIS:tardisPowered()==0){
		TARDIS:tardisPower()
    }

	if(TARDIS:tardisFlying()==0){
		TARDIS:tardisFlightmode()
    }

	if(TARDIS:tardisIsHADS()==1){
		TARDIS:tardisHADS()
    }

	if(TARDIS:tardisPhyslocked()==0){
		TARDIS:tardisPhyslock()
    }

	if(TARDIS:tardisLongflighted()==1){
		TARDIS:tardisLongflight()
	}

	           if(TARDIS:tardisInVortex()==1) {
					TARDIS:tardisSetDestination(owner():pos(), ang(0,0,0))
					TARDIS:tardisMaterialise()
					#timer("WaitingForRemat", 1000)
            }

            else {
                if(TARDIS:tardisInVortex()==0) {
					TARDIS:tardisDemat(owner():pos(), ang(0,0,0))
					#timer("WaitingForDemat", 1000)
					}
            }
}
} # END FUNCTION


function makeItPretty(Index:number, Model:string, Where:vector, Angle:angle, Size:vector, Skin:string)
	{
    holoCreate(Index,Where,Size,Angle,vec(255,255,255),Model)
    holoMaterial(Index,Skin)
    HOLONUMBER = HOLONUMBER + 1

	} # END FUNCTION


function funcBarge()
	{
    #OWNER=TARDIS:owner()
            if(TARDIS:tardisPowered()==0){
					TARDIS:tardisPower()
            }
			if(TARDIS:tardisPhyslocked()==0){
					TARDIS:tardisPhyslock()
            }
	if(TARDIS:tardisLongflighted()==1){
		TARDIS:tardisLongflight()
	}
	if(TARDIS:tardisLocked()==0){
		TARDIS:tardisLock()
	}

    OURSELVES=entity():isConstrainedTo()
    #findExcludeEntity(OURSELVES)
    #print("Excluding: ", OURSELVES)

    findByClass("gmod_tardis_interior")
		#TardisFindAll = findSortByDistance(owner():pos())
    TardisCount = findToArray():count()
    RandomChoice = randint(1,TardisCount)
    TardisBarge = findResult(RandomChoice)
    
    Position0 = TardisBarge:toWorld(vec())
    Position1 = TardisBarge:toWorld(vec(randint(50,70), randint(50,70), 0))
    Position1B = Position1 + vec(0,0,50)
    Position2 = TardisBarge:toWorld(vec(40,40,10))
    Position3 = TardisBarge:toWorld(vec(-40,-40,10))
    Position4 = TardisBarge:toWorld(vec(40,-40,10))
    Position5 = TardisBarge:toWorld(vec(-40,40,10))
    Position8 = TardisBarge:boxMax()
    Position9 = TardisBarge:boxMin()
    Position10 = TardisBarge:toWorld(vec(0,0,20))
    Position11 = TardisBarge:toWorld(vec(0,0,50))
    Position12 = TardisBarge:toWorld(vec(0,0,80))


    
    #CORNER1 = TardisBarge:boxMax()
    #CORNER2 = TardisBarge:boxMin()
    #Position22 = Position0 +vec(randvec(CORNER1,CORNER2))
    
    SIZEEXTERIOR = TARDIS:getModelScale()  # Get scale of our exterior shell

print(TardisBarge:boxMax():x())
print(TardisBarge:boxMax():y())
print(TardisBarge:boxMax():z())

print(TardisBarge:boxMin():x())
print(TardisBarge:boxMin():y())
print(TardisBarge:boxMin():z())

print(TARDIS:boxMax():x())
print(TARDIS:boxMax():y())
print(TARDIS:boxMax():z())

print(TARDIS:boxMin():x())
print(TARDIS:boxMin():y())
print(TARDIS:boxMin():z())

print("TARDIS located at ", Position1, " owned by ", TardisBarge:owner())

			if(TARDIS:tardisLocked()==1){
					TARDIS:tardisLock()
			}
            if(TARDIS:tardisHealth() >= 20){
			HEALTHY = 1
            }
            if(TARDIS:tardisHealth() <= 20){
			HEALTHY = 0
            }
            if(TARDIS:tardisInVortex()==1){
					if(HEALTHY == 1) {
					TARDIS:tardisSetDestination(Position1, ang(0,0,0))
					TARDIS:tardisMaterialise()
					timer("WaitingForRemat", 1000)
					}
					if(HEALTHY == 0) {
					TARDIS:tardisSetDestination(Position1, ang(randvec(-180,180)))
					TARDIS:tardisMaterialise()
					timer("WaitingForRemat", 1000)
					}
            }
            if(TARDIS:tardisInVortex()==0){
					if(HEALTHY == 1) {
					TARDIS:tardisDemat(Position1, ang(0,0,0))
					timer("WaitingForDemat", 1000)
					}
					if(HEALTHY == 0) {
					TARDIS:tardisDemat(Position1, ang(randvec(-180,180)))
					timer("WaitingForDemat", 1000)
					}
            }

    #makeItPretty(1,"models/effects/splodearc.mdl",Position2,ang(0,0,0),vec(1,1,1),"")
    #makeItPretty(2,"models/effects/splodearc.mdl",Position3,ang(0,0,0),vec(1,1,1),"")
    #makeItPretty(3,"models/effects/splodearc.mdl",Position4,ang(0,0,0),vec(1,1,1),"")
    #makeItPretty(4,"models/effects/splodearc.mdl",Position5,ang(0,0,0),vec(1,1,1),"")
    makeItPretty(10,"hqsphere",Position1+vec(0,0,50),ang(0,0,0),vec(8,8,8),"models/props_combine/com_shield001a")

B1 = 50
B2 = 55
B3 = 60

D = holoCreate(1,Position0+vec(0,0,85),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
F = holoCreate(2,Position0+vec(0,0,60),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
G = holoCreate(3,Position0+vec(0,0,60),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
H = holoCreate(4,Position0+vec(0,0,85),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
I = holoCreate(5,Position0+vec(0,0,60),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
J = holoCreate(6,Position0+vec(0,0,60),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
K = holoCreate(7,Position0+vec(0,0,85),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
L = holoCreate(8,Position0+vec(0,0,60),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")
M = holoCreate(9,Position0+vec(0,0,60),vec(0.5),ang(0),vec(255,255,255),"hq_sphere")

D:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
F:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
G:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
H:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
I:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
J:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
K:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
L:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)
M:setTrails(7,5,3,"trails/laser",vec(255,255,255),255)

#D:setMaterial("models/alyx/emptool_glow")
#F:setMaterial("models/alyx/emptool_glow")
#G:setMaterial("models/alyx/emptool_glow")



	BOOM1 = effect()
	BOOM1:setDamageType(512)
	BOOM1:setScale(20)
	BOOM1:setMagnitude(100)
	BOOM1:setRadius(400)
	BOOM1:setOrigin(Position11)
	BOOM1:play("Explosion")
    
	timer("deleteholo",17000)

## CLEANUP: clean up if loops to ensure that a TARDIS with 0 health doesn't do barge process

ARTRONFINALAMOUNT = TARDIS:tardisArtronEnergy() - 6
TardisBarge:tardisRemoveArtronEnergy(ARTRONFINALAMOUNT)


} # END FUNCTION



function funcTargetPlayer(ARGUMENT1:string)
	{
		PERSON = findPlayerByName(ARGUMENT1)
			if(PERSON:isValid()){
			NEARSUBJECT = PERSON:pos()
			NEARSUBJECT = NEARSUBJECT + vec(-50,-50,0)
			print("Going to: "+PERSON:name())

            if(TARDIS:tardisPowered()==0){
		              TARDIS:tardisPower()
            }
            if(TARDIS:tardisLocked()==0){
		              TARDIS:tardisLock()
            }
            if(TARDIS:tardisPhyslocked()==0){
		              TARDIS:tardisPhyslock()
            }
	        if(TARDIS:tardisLongflighted()==1){
		              TARDIS:tardisLongflight()
            }
            # REQUIRED: Door is first made locked to enable demat, then unlocked in preparation of the player
            if(TARDIS:tardisLocked()==1){
		              TARDIS:tardisLock()
            }
            if(TARDIS:tardisInVortex()==1){
					TARDIS:tardisSetDestination(NEARSUBJECT, ang(0,0,0))
					TARDIS:tardisMaterialise()
            }
            elseif(TARDIS:tardisInVortex()==0){
		              TARDIS:tardisDemat(NEARSUBJECT, ang(0,0,0))
            }
			}
		else {
            print("Unable to target this person!")
        }
	} # END FUNCTION

function funcEscape()
	{
            if(TARDIS:tardisPowered()==0){
		              TARDIS:tardisPower()
            }
            if(TARDIS:tardisLocked()==0){
		              TARDIS:tardisLock()
            }
            if(TARDIS:tardisLongflighted()==0){
		              TARDIS:tardisLongflight()
	        }
            if(TARDIS:tardisIsomorphic()==0){
		              TARDIS:tardisIsomorph()
            }
			TARDIS:tardisDemat(vec(0,0,0), ang(0,0,0))
	} # END FUNCTION

function funcLockdoor()
	{
            if(TARDIS:tardisPowered()==0){
		              TARDIS:tardisPower()
            }
            if(TARDIS:tardisLocked()==0){
		              TARDIS:tardisLock()
					  print("Door locked")
            }
			elseif(TARDIS:tardisLocked()==1){
		              TARDIS:tardisLock()
					  print("Door unlocked")
            }
	} # END FUNCTION

function funcPhyslock()
	{
		              TARDIS:tardisPhyslock()
	} # END FUNCTION

function funcMaterialise()
	{
            if(TARDIS:tardisInVortex()==1){
			TARDIS:tardisMaterialise()
            }
	} # END FUNCTION

function funcHealth()
	{
            if(TARDIS:tardisHealth() > 20){
			print("Health: " +TARDIS:tardisHealth() + "%")
            }
            elseif(TARDIS:tardisHealth() < 20){
			print("* WARNING *")
			print("Health: " +TARDIS:tardisHealth() + "%")
            }
	} # END FUNCTION

function funcHADS()
	{
            if(TARDIS:tardisPowered()==0){
		              TARDIS:tardisPower()
            }
			TARDIS:tardisHADS()   
            if(TARDIS:tardisIsHADS()==1){
		              print("HADS: ON")
            }
            elseif(TARDIS:tardisIsHADS()==0){
		              print("HADS: OFF")
            }
	} # END FUNCTION

function funcRepair()
	{
            if(TARDIS:tardisPowered()==0){
		    TARDIS:tardisPower()
            }
		    TARDIS:tardisSelfrepair()
	} # END FUNCTION

function funcWhere()
	{
            if(TARDIS:tardisInVortex()==1){
		    print("Location: Vortex")
            }
            elseif(TARDIS:tardisInVortex()==0){
            print("Location: Materialised at ",TARDIS:pos())
            }
            if(TARDIS:tardisMoving()==1){
		    print("Location: - DEMAT/REMAT -")
            }
	} # END FUNCTION

function funcReturn()
	{
            if(TARDIS:tardisPowered()==0){
		    TARDIS:tardisPower()
            }
            TARDIS:tardisFastReturn()
	} # END FUNCTION

function funcGPS()
	{
    FINDGPS = findByClass("gmod_wire_gps")
	if(FINDGPS > 0) {
            if(TARDIS:tardisPowered()==0){
				        TARDIS:tardisPower()
            }
            if(TARDIS:tardisLocked()==0){
		              TARDIS:tardisLock()
            }
            if(TARDIS:tardisPhyslocked()==0){
		          TARDIS:tardisPhyslock()
            }
            if(TARDIS:tardisLongflighted()==1){
		              TARDIS:tardisLongflight()
            }
    GPSFindAll = findSortByDistance(owner():pos())
    GPSCount = findToArray():count()
    RandomChoice = randint(1,GPSCount)
    GPSLOCATION1 = findResult(RandomChoice)
    GPSLOCATION2 = GPSLOCATION1:toWorld(vec(0,0,2)) # Add 2 to Z axis/height, to ensure TARDIS doesn't get stuck on GPS entity

            if(TARDIS:tardisInVortex()==1){
					TARDIS:tardisSetDestination(GPSLOCATION2, ang(0,0,0))
					TARDIS:tardisMaterialise()
            }
            if(TARDIS:tardisInVortex()==0){
		              TARDIS:tardisDemat(GPSLOCATION2, ang(0,0,0))
            }
	}
	else {
			print("Can't find GPS to lock on to.")
		}
	} # END FUNCTION

function funcStatus()
	{
		    if(TARDIS:tardisInVortex()==1){
		              print("Location: Vortex")
            }
            if(TARDIS:tardisInVortex()==0 & TARDIS:tardisMoving()==0){
		              print("Location: Materialised at ",TARDIS:pos())
            }
            if(TARDIS:tardisMoving()==1){
		              print("Location: -DEMAT/REMAT-")
            }
            if(TARDIS:tardisPowered()==1){
		              print("Power: ON")
            }
            elseif(TARDIS:tardisPowered()==0){
		              print("Power: OFF")
            }
            if(TARDIS:tardisVisible()==0){
		              print("Cloak: ON")
            }
			if(TARDIS:tardisVisible()==1){
		              print("Cloak: OFF")
            }
            if(TARDIS:tardisIsHADS()==1){
		              print("HADS: ON")
            }
            elseif(TARDIS:tardisIsHADS()==0){
		              print("HADS: OFF")
            }
			if(TARDIS:tardisSelfrepairing()==1){
		              print("* REPAIRING *")
            }
            print("Health: ", TARDIS:tardisHealth())
			print("Came from: ", TARDIS:tardisLastPos())
			print("Size (ext): ", TARDIS:boxSize())
			
			findByClass("gmod_tardis")
			TardisCount = findToArray():count()
			print("TARDISes in universe: ", TardisCount)
	} # END FUNCTION

function funcComeToMe()
	{
            WHEREAMI = owner():pos()
            NEARPLAYER = WHEREAMI + vec(-50,-50,0)
    
            if(TARDIS:tardisPowered()==0){
		              TARDIS:tardisPower()
            }
            #if(TARDIS:tardisOpened()==1){
		          #    TARDIS:tardisDoors()
            #}
            if(TARDIS:tardisPhyslocked()==0){
		              TARDIS:tardisPhyslock()
            }
	        if(TARDIS:tardisLongflighted()==1){
		              TARDIS:tardisLongflight()
            }
            if(TARDIS:tardisLocked()==1){
		              TARDIS:tardisLock()
            }

            if(TARDIS:tardisInVortex()==1){
					TARDIS:tardisSetDestination(NEARPLAYER,ang(0,0,0))
					TARDIS:tardisMaterialise()
            }
            
            if(TARDIS:tardisInVortex()==0){
			
				if(TARDIS:tardisBraking()==1) {
        
					ARTRONFUEL = TARDIS:tardisArtronEnergy()
					ARTRONREMAINING = TARDIS:tardisMaxArtronEnergy() - TARDIS:tardisArtronEnergy()
					print("Fuel reserves: " + ARTRONFUEL)
			
					if ((ARTRONFUEL < 5) & (ARTRONFUEL != 0)) {
						print("Insufficient fuel for safe flight: " + ARTRONFUEL)
					}
			
					elseif(ARTRONFUEL >= 5) {
						TARDIS:tardisHandbrake()
						print("Fuel reserves: " + ARTRONFUEL)
						TARDIS:tardisDemat(NEARPLAYER,ang(0,0,0))
					}
				}
    elseif(TARDIS:tardisBraking()==0) {
        TARDIS:tardisDemat(NEARPLAYER,ang(0,0,0))     
    }
	}

} # END FUNCTION

}  # END OF FIRST









if (TARDIS:isValid()) {


if(clk("deleteholo")) {
    holoDeleteAll()
	HOLONUMBER = 0
}

if(clk("playerdeath")) {
    funcPlayerDeath()
}



if (DEMAT&~DEMAT) {
	funcEscape()
}

if (MAT&~MAT) {
	funcMaterialise()
}

if (ESCAPE&~ESCAPE) {
	funcEscape()
}

if (BARGE&~BARGE) {
	funcBarge()
}

if (REPAIR&~REPAIR) {
	funcRepair()
}

if (POWER&~POWER) {
TARDIS:tardisPower()
}

if (HADS&~HADS) {
	funcHADS()
}

if (GPS&~GPS) {
	funcGPS()
}

if (LOCK&~LOCK) {
	funcLockdoor()
}

if (PHYS&~PHYS) {
	funcPhyslock()
}

if (HEALTH&~HEALTH) {
	funcHealth()
}

if (WHERE&~WHERE) {
	funcWhere()
}

if (FASTRETURN&~FASTRETURN) {
	funcReturn()
}

if (STATUS&~STATUS) {
	funcStatus()
}

if (COMETOME&~COMETOME) {
	funcComeToMe()
}



### Script for monitoring chat commands

if(chatClk(owner())) {
    LastSaid = owner():lastSaid():lower():explode(" ")
    COMMAND = LastSaid[1,string]
    ARGUMENT1 = LastSaid[2,string]


if(COMMAND=="!barge") {
    hideChat(1)
	funcBarge()
}

elseif(COMMAND=="!esc") {
    hideChat(1)
	funcEscape()
    }

elseif(COMMAND=="!lock") {
    hideChat(1)
	funcLockdoor()
    }

elseif(COMMAND=="!phys") {
    hideChat(1)
	funcPhyslock()
    }

elseif(COMMAND=="!mat") {
    hideChat(1)
	funcMaterialise()
    }

elseif(COMMAND=="!health") {
    hideChat(1)
	funcHealth()
    }

elseif(COMMAND=="!power") {
    hideChat(1)
			TARDIS:tardisPower()
    }

elseif(COMMAND=="!brake") {
    hideChat(1)
			TARDIS:tardisHandbrake()
    }

elseif(COMMAND=="!hads") {
    hideChat(1)
	funcHADS()
    }

elseif(COMMAND=="!repair") {
    hideChat(1)
	funcRepair()
    }

elseif(COMMAND=="!where") {
    hideChat(1)
	funcWhere()
    }

elseif(COMMAND=="!return") {
    hideChat(1)
	funcReturn()
    }

elseif(COMMAND=="!gps") {
    hideChat(1)
	funcGPS()
	}

elseif(COMMAND=="!status") {
    hideChat(1)
	funcStatus()
    }

elseif(COMMAND=="!me") {
    hideChat(1)
	funcComeToMe()
    }

elseif(COMMAND=="!go") {
	if(LastSaid[2,string]){
	hideChat(1)
	funcTargetPlayer(ARGUMENT1)
    }
    }

elseif(COMMAND=="!death") {
	hideChat(1)
    if(DeathRescue == 1) {
        DeathRescue = 0
        runOnDeath(0)
        print("TARDIS death rescue is now OFF")
        }
    elseif(DeathRescue == 0) {
        DeathRescue = 1
        runOnDeath(1)
        print("TARDIS death rescue is now ON")
    }
    }
    
} # END OF CHAT MONITOR


}

elseif (TARDIS:isValid() == 0) {

	print("First wire the E2 chip to TARDIS exterior")

}


A += 10

holoPos(1,Position1B+vec(0,cos(A)*B1,sin(A)*B1))
holoPos(2,Position1B+vec(-cos(A)*B1,sin(A)*B1,cos(A)*B1))
holoPos(3,Position1B+vec(cos(A)*B1,sin(A)*B1,cos(A)*B1))
holoPos(4,Position1B+vec(0,cos(A)*B2,sin(A)*B2))
holoPos(5,Position1B+vec(-cos(A)*B2,sin(A)*B2,cos(A)*B2))
holoPos(6,Position1B+vec(cos(A)*B2,sin(A)*B2,cos(A)*B2))
holoPos(7,Position1B+vec(0,cos(A)*B3,sin(A)*B3))
holoPos(8,Position1B+vec(-cos(A)*B3,sin(A)*B3,cos(A)*B3))
holoPos(9,Position1B+vec(cos(A)*B3,sin(A)*B3,cos(A)*B3))


