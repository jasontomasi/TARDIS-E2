@name TARDIS Holomap (IntuitiveNZ)
@inputs
@outputs
@persist TardisCount:number Tardises:array Radius:number Speed:number Height:number Position:vector

## Reserved holo IDs:
## 0: backplane
## 1-20: TARDISes
## 21-40: circles around TARDISes
## 80-90: triangles
##
## COLOURS: Turquoise (0,255,230), medium blue (0,155,255), white (255,255,255)
##
## IDEAS:
## - move this E2 onto the landing bay E2, and have the holos hovering above the console
## - use PropSpawn to spawn angels when...
## 


interval(250)

    Radius = 50
    Speed = 5
    Height = 20


if (first()) {

# TURN UP THE WIREMOD LIMITS SO THE E2 WON'T GET SHUT DOWN

concmd("sv_cheats 1")
concmd("wire_holograms_modelany 1")
concmd("wire_holograms_spawn_amount 30")
concmd("wire_holograms_burst_amount 30")
concmd("wire_holograms_burst_delay 0")
concmd("wire_holograms_max 128")
concmd("wire_holograms_size_max 2048")
concmd("wire_expression2_print_max 1000")
concmd("wire_expression2_unlimited 1")
concmd("wire_expression2_quotatick 500000")
concmd("wire_expression2_quotasoft 500000")


	Position = entity():pos()
    entity():setMaterial("models/alyx/emptool_glow")

    # Spiraling triangles with trails
    for (A = 80, 90) {
        holoCreate(A):setTrails(1.7,1.7,30,"trails/plasma",vec(255,255,255), 255)
        holoModel(A,"hqcone")
        holoMaterial(A,"models/wireframe")
        holoScale(A,vec(-0.1,-0.1,-0.1))
        holoColor(A,vec(255,255,255))
    }

	# Black backdrop for the other holograms
#	holoCreate(0,entity():pos() + vec(0,0,1), vec(40,40,1), ang(), vec())
#	holoModel(0,"plane")
#	holoAlpha(0, 250)
#	holoColor(0, vec(50,50,50))

# LightCreate: Index, Pos, Colour, Distance, Brightness
#lightCreate(1, Position + vec(40,0,70), vec(100,100,100), 100, 100)
#lightCreate(2, Position + vec(-40,0,70), vec(100,100,100), 100, 100)
#lightCreate(3, Position + vec(0,-40,70), vec(100,100,100), 100, 100)
#lightCreate(4, Position + vec(0,40,70), vec(100,100,100), 100, 100)

#lightCreate(5, Position + vec(0,0,40), vec(100,100,100), 100, 75)
#lightCreate(6, Position + vec(0,0,15), vec(100,100,100), 100, 75)





function funcFindTargets() {

    findByClass("gmod_tardis")
    Tardises = findToArray()
    TardisCount = Tardises:count()
    Excess = TardisCount + 1

    for(C = Excess, 20) {
        holoDelete(C)
    }

foreach(Index,TargetTardis:entity = Tardises) {
	if (TargetTardis:isValid()) {
		
# If TARDIS hologram doesn't already exist, then create it. Scale of 0.08 looks good
		if (!holoEntity(Index)) {
			holoCreate(Index, entity():pos(), vec(0.08,0.08,0.08) )
		}
	}
}

timer("findnew", 10000)

} #ENDFUNC


function funcHoloTardis() {

foreach(Index,TargetTardis:entity = Tardises) {
    
    if (TargetTardis:isValid()) {

	holoAlpha(Index, 255)

	#holoColor(Index, vec(0,155,255))
	holoColor(Index, vec(255,255,255))
	# Get position of target, localize the vector, relative to expression chip, and scale down vec(100,100,50)
	holoPos(Index, (entity():pos() + entity():toLocal(TargetTardis:pos()) / vec(100,100,40)) + vec(0,0,5) )
	holoModel(Index, "models/emrys/tardis/evildan/edwardian_box.mdl")


	# models/the_sniper_9/doctorwho/tardis/tardis.mdl, models/the_sniper_9/doctorwho/tardis/tardis.mdl, models/emrys/tardis/evildan/edwardian_box.mdl


	#holoMaterial(Index, "models/wireframe")
	holoAng(Index,TargetTardis:angles())
	holoRenderFX(Index,0)

if (holoEntity(Index+20):isValid()) {
        holoRenderFX(Index+20, 9)
}

if (TargetTardis:tardisHealth() < 20) {
    holoColor(Index, vec(255,0,0))
    #holoRenderFX(Index, 9)

    		# Draw extra circle around damaged TARDISes, with an ID of Index+20
                    holoCreate(Index+20, holoEntity(Index):pos() + vec(0,0,5))
                    holoParent(Index+20, holoEntity(Index))
                    holoModel(Index+20, "sphere3")
                    holoScale(Index+20, vec(1.25,1.25,1.25))
                    holoColor(Index+20, vec(255,0,0))
                    holoAlpha(Index+20, 200)
                    holoRenderFX(Index+20, 1)
                    holoMaterial(Index+20, "models/alyx/emptool_glow")
                    holoAng(Index+20, holoEntity(Index):angles())
    }

# If any TARDIS was previously damaged but is now repaired, it would've had circle holo (ID of Index+20), so delete the circle
if (TargetTardis:tardisHealth() >= 20) {
    if (holoEntity(Index+20):isValid()) {
            holoDelete(Index+20)
    }
}

if (TargetTardis:tardisInVortex() == 1) {
    #holoAlpha(Index, 230)
    #holoMaterial(Index, "models/props_forest/waterfall001")   # effects/minescreen_static01_, 
    holoMaterial(Index, "models/wireframe")

        if (TargetTardis:tardisHealth() < 20) {
            # Make the angles more dramatic when damaged
            #holoAng(Index, ang(randint(-90,90),randint(-90,90),randint(-50,90)))
            holoPos(Index, entity():pos() + vec(randint(-140,140), randint(-140,140), randint(10,120))) 
            
                    #holoCreate(Index+20, holoEntity(Index):pos() + vec(0,0,5))
                    #holoParent(Index+20, holoEntity(Index))
                    #holoModel(Index+20, "sphere3")
                    #holoScale(Index+20, vec(1.25,1.25,1.25))
                    #holoColor(Index+20, vec(255,0,0))
                    #holoAlpha(Index+20, 128)
                    #holoRenderFX(Index+20, 9)
                    #holoMaterial(Index+20, "effects/minescreen_static01_")
                    #holoAng(Index+20, holoEntity(Index):angles())
        }
    else{
    holoAng(Index, ang(randint(-30,30),randint(-30,30),randint(-30,30)))
    #holoColor(Index, vec(161,255,255))
    #holoAlpha(Index, 128)
    }

    holoPos(Index, entity():pos() + vec(randint(-100,100), randint(-100,100), randint(20,120)))
}

if ((TargetTardis:tardisInVortex() == 0) & (TargetTardis:tardisHealth() < 20)) {
    holoMaterial(Index, "models/wireframe")
	holoColor(Index, vec(255,0,0))
}

if ((TargetTardis:tardisInVortex() == 0) & (TargetTardis:tardisHealth() >= 20)) {
	holoMaterial(Index, "")
	holoRenderFX(Index,9)
	holoColor(Index, vec(61,255,255))
}

if (TargetTardis:tardisMoving() == 1) {
	holoMaterial(Index, "models/wireframe")
    holoColor(Index, vec(255,255,0))
    holoRenderFX(Index,1)
    }

}
	else {}
}

#Call function again every X millisecomnds
timer("holotardis", 750)

} # ENDFUNC


function funcCleanUpHoloTardis() {

# For every TARDIS entity in the array, scavenge old records and delete the assoc holo

foreach(Index,TargetTardis:entity = Tardises) {

	if (TargetTardis:isValid() == 0) {
            holoDelete(Index)
			holoDelete(Index+20)
    }

}

timer("checkold", 20000)

} # ENDFUNC


# Keep timers spaced apart so we don't go over tick quota upon spawning E2
timer("findnew", 10000)
timer("holotardis", 15000)
timer("checkold", 20000)

} # END OF FIRST




# Move the spiraling triangles & trails
for (D = 80, 90) {
        holoPos(D, entity():pos() + vec(sin(curtime()*Speed)*Radius, cos(curtime()*Speed)*Radius, Height))
        Radius = Radius + 7
        Speed = Speed + 2
        Height = Height + 7
}



if(clk("findnew")) {
    funcFindTargets()
}

if(clk("holotardis")) {
    funcHoloTardis()
}

if(clk("checkold")) {
    funcCleanUpHoloTardis()
}
