@name TARDIS Holomap (IntuitiveNZ)
@inputs
@outputs
@persist TardisCount:number Tardises:array Radius:number Multiplier:number Height:number Position:vector

interval(200)

    Radius = 40
    Multiplier = 20
    Height = 35

if (first()) {

	Position = entity():pos()

    for (A = 80, 90) {
    
        holoCreate(A):setTrails(4,4,20,"trails/laser",vec(255,255,255),255)
        #holoModel(A,"cone")
        #holoMaterial(A,"models/wireframe")
        holoScale(A,vec(-0.05,-0.05,-0.05))
        holoColor(A,vec(255,255,255))
    }



	# Black backdrop for the other holograms
	holoCreate(0,entity():pos() + vec(0,0,1), vec(40,40,1), ang(), vec())
	holoModel(0,"plane")
	holoAlpha(0, 250)
 holoColor(0, vec(50,50,50))

timer("start", 1000)
timer("holotardis", 2000)


function funcFindTargets() {

    findByClass("gmod_tardis")
    Tardises = findToArray()
    TardisCount = Tardises:count()
    Excess = TardisCount + 1

    for(C = Excess, 20) {
        holoDelete(C)
    }

 timer("start", 8000)
}


function funcHoloTardis() {

foreach(Index,TargetTardis:entity = Tardises) {
    
    if (TargetTardis:isValid()) {

 # Scale of 0.08 looks good
	holoCreate(Index, entity():pos(), vec(0.08,0.08,0.08) )
	holoAlpha(Index, 255)
 # Turquoise vec(0,255,230), medium blue vec(0,155,255), white vec(255,255,255)
	holoColor(Index, vec(0,155,255))
	# Get position of target, localize the vector, place at expression chip, and scale down vec(100,100,50)
	holoPos(Index, (entity():pos() + entity():toLocal(TargetTardis:pos()) / vec(100,100,40)) + vec(0,0,5) )
	holoModel(Index, "models/the_sniper_9/doctorwho/tardis/tardis.mdl")
	holoMaterial(Index, "")
	holoAng(Index,TargetTardis:angles())
	holoRenderFX(Index,0)

if (holoEntity(Index+20):isValid()) {
        holoRenderFX(Index+20, 9)
}

if (TargetTardis:tardisHealth() < 20) {
    holoColor(Index, vec(255,0,0))
    #holoRenderFX(Index, 9)
    
                    holoCreate(Index+20, holoEntity(Index):pos() + vec(0,0,5))
                    holoParent(Index+20, holoEntity(Index))
                    holoModel(Index+20, "sphere3")
                    holoScale(Index+20, vec(1.25,1.25,1.25))
                    holoColor(Index+20, vec(255,0,0))
                    holoAlpha(Index+20, 128)
                    #holoRenderFX(Index+20, 9)
                    holoMaterial(Index+20, "effects/minescreen_static01_")
                    holoAng(Index+20, holoEntity(Index):angles())
    }

if (TargetTardis:tardisHealth() > 20) {
    if (holoEntity(Index+20):isValid()) {
            holoDelete(Index+20)
    }    
    }

if (TargetTardis:tardisInVortex() == 1) {
    #holoAlpha(Index, 230)
    holoMaterial(Index, "effects/minescreen_static01_")

        if (TargetTardis:tardisHealth() < 20) {
            # Make the angles more dramatic when damaged
            #holoAng(Index, ang(randint(-90,90),randint(-90,90),randint(-50,90)))
            holoPos(Index, entity():pos() + vec(randint(-80,80), randint(-80,80), randint(10,100))) 
            
                    #holoCreate(Index+20, holoEntity(Index):pos() + vec(0,0,5))
                    #holoParent(Index+20, holoEntity(Index))
                    #holoModel(Index+20, "sphere3")
                    #holoScale(Index+20, vec(1.25,1.25,1.25))
                    #holoColor(Index+20, vec(255,0,0))
                    #holoAlpha(Index+20, 128)
                    #holoRenderFX(Index+20, 9)
                    #holoMaterial(Index+20, "effects/minescreen_static01_")
                    #holoAng(Index+20, holoEntity(Index):angles())
        }
    else{
    holoAng(Index, ang(randint(-30,30),randint(-30,30),randint(-30,30)))
    holoColor(Index, vec(255,255,255))
    holoAlpha(Index, 128)
    }
    
    holoPos(Index, entity():pos() + vec(randint(-50,50), randint(-50,50), randint(30,100)))   
}
if (TargetTardis:tardisMoving() == 1) {
    holoColor(Index, vec(255,255,0))
    holoRenderFX(Index,9)
    }

    }
    else {}
}

 timer("holotardis", 3000)

}

}



for (D = 80, 90) {

        holoPos(D, entity():pos() + vec(sin(curtime()*Multiplier)*Radius, cos(curtime()*Multiplier)*Radius, Height))
        Radius = Radius + 10
        Multiplier = Multiplier + 2
        Height = Height + 5

}








if(clk("start")) {
    funcFindTargets()
}

if(clk("holotardis")) {
    funcHoloTardis()
}

