@name SIDRAT landing bay (IntuitiveNZ)
@inputs RECALL RETURN
@persist Tardises:array GPSes:array LandingBayRange:number E2:vector LandingBayMaterial:string LandingBayColor:vector

runOnChat(1)

if(first()){

# CUSTOMISE THESE OPTIONS 

    LandingBayRange = 1024
    LandingBayMaterial = "effects/screen_monitor_blank"
    LandingBayColor = vec(255,255,255)
}



function funcFindSidrats() {
    findByClass("gmod_tardis")
    Tardises = findToArray()
    TardisCount = findToArray():count()
}



function funcFindLandingBay() {
    findByClass("gmod_wire_gps")
    findClipToSphere(entity():pos(),LandingBayRange)
    GPSes = findToArray()
    GPSCount = findToArray():count()
}



function funcRecallSidrats() {

Index = 1

    if (GPSCount < TardisCount) {
    print("TARDISES: ", TardisCount, "GPS chips: ", GPSCount, "Please spawn", TardisCount-GPSCount, "more.")
    }
    
    if (GPSCount >= TardisCount & (TardisCount > 0)) {
    print("OK. TARDISES: ", TardisCount, "GPS chips: ", GPSCount)
    }

foreach(Index,TargetTardis:entity = Tardises) {
    
    if (TargetTardis:isValid()) {

    ChosenGPS = GPSes[Index,entity]
    TargetGPS = ChosenGPS:pos()
    GPSBoxTop = ChosenGPS:aabbMax():z()


if (TargetTardis:tardisHealth() > 0 ) {

    print("TARDIS",Index,"assigned landing bay",Index)

    TardisHeight = TargetTardis:boxSize():z()
    TardisHalfHeight = TardisHeight / 2

# CHECK IF TARDIS ALREADY THERE (in future, whether any are there via 'findInSphere')



    if (TargetTardis:pos() != TargetGPS) {

# HOLOGRAMS

    holoCreate(Index)
    holoPos(Index, vec(TargetGPS:x(), TargetGPS:y(), TargetGPS:z()+TardisHalfHeight))
    holoScaleUnits(Index, vec(TargetTardis:boxSize():x()+10,TargetTardis:boxSize():y()+10,TargetTardis:boxSize():z()+10))
    holoAng(Index, ang(0,0,0))
    holoModel(Index, "cube")
    holoMaterial(Index, LandingBayMaterial)
    holoColor(Index, LandingBayColor,255)
    
    timer("deleteholo",16000)
    timer("arrivalchecks",22000)

    if(TargetTardis:tardisPowered()==0) {
		TargetTardis:tardisPower()
            }
    if(TargetTardis:tardisPhyslocked()==0) {
		TargetTardis:tardisPhyslock()
            }
    if(TargetTardis:tardisLongflighted()==1) {
		TargetTardis:tardisLongflight()
	        }
    if(TargetTardis:tardisLocked()==0) {
		TargetTardis:tardisLock()
	        }
    if(TargetTardis:tardisVisible()==0) {
		TargetTardis:tardisPhase()
	        }
    if(TargetTardis:tardisInVortex()==1) {
		TargetTardis:tardisSetDestination(TargetGPS, ang(0,0,0))
		TargetTardis:tardisMaterialise()
			}
    if(TargetTardis:tardisInVortex()==0) {
		TargetTardis:tardisDemat(TargetGPS, ang(0,0,0))
			}

}

}

elseif (TargetTardis:tardisHealth() == 0 ) {
    
	print("TARDIS",Index,"DAMAGED @",TargetTardis:pos())
 
    if(TargetTardis:tardisSelfrepairing()==0) {
		TargetTardis:tardisSelfrepair()
    }

}


Index++
}
else {}
}
# END of foreach loop




findClearBlackList()
findClearBlackClassList()

findClearWhiteList()
findClearWhiteClassList()

}



function funcClearLandingBay() {

    foreach(Index,TargetTardis:entity = Tardises) {
        
    if (TargetTardis:isValid()) {

				    if(TargetTardis:tardisLongflighted()==0) {
		          TargetTardis:tardisLongflight()
	        }
        if(TargetTardis:tardisPowered()==0) {
				        TargetTardis:tardisPower()
    			}     
        
        TargetTardis:tardisFastDemat()
}
else {}
    }
	
}






# BEGIN CHAT MONITOR

if(chatClk(owner())) {
    LastSaid = owner():lastSaid():lower():explode(" ")
    COMMAND = LastSaid[1,string]
    ARGUMENT1 = LastSaid[2,string]


if(COMMAND=="!recall") {
    hideChat(1)
    timer("TimerOne",2000)
}

elseif(COMMAND=="!clear") {
    hideChat(1)
	funcClearLandingBay()
    }

}



# BEGIN INPUT BUTTONS

if (RECALL&~RECALL) {
	timer("TimerOne",1000)
}

if (RETURN&~RETURN) {
	funcClearLandingBay()
}







# BEGIN TIMER SECTION

if(clk("TimerOne")) {
    funcFindSidrats()
    timer("TimerTwo",1000)
}

if(clk("TimerTwo")) {
    funcFindLandingBay()
    timer("TimerThree",1000)
}

if(clk("TimerThree")) {
    funcRecallSidrats()
}

if(clk("deleteholo")) {
    holoDeleteAll()
}

if(clk("arrivalchecks")) {
    foreach(Index,TargetTardis:entity = Tardises) {
    
        if (TargetTardis:tardisHealth() < 20 ) {
            TargetTardis:tardisSelfrepair()
            print("TARDIS",Index,"REPAIRING:",TargetTardis:pos())
        }
		
		elseif (TargetTardis:tardisHealth() >= 20 ) {
            if(TargetTardis:tardisPowered()==1) {
				           TargetTardis:tardisPower()
			}
        }
		
    }
}

